#!/bin/sh /etc/rc.common

START=99  # Service startup order
STOP=01  # Service stop order
USE_PROCD=1
Name=OneWifi

start_service() {
    echo "Starting onewifi service..." >> /tmp/onewifi_log.txt
    # Run wifi_interface_up.sh only once after boot
    if [ ! -f /tmp/onewifi_bootup_completed ]; then
        echo "Running wifi_interface_up.sh..." >> /tmp/onewifi_log.txt
        cd /banana-pi
        ./wifi_interface_up.sh >> /tmp/onewifi_log.txt
        cd -
        touch /tmp/onewifi_bootup_completed  # Create flag to ensure it's not run again
    fi

    # Use procd to manage the OneWifi process
    procd_open_instance
    procd_set_param command /usr/bin/OneWifi -c  # Command with arguments
    procd_set_param respawn 50 10 10  # Automatically restart if down
    procd_set_param limits core="unlimited"
    procd_set_param limits stack="unlimited"
    procd_set_param stdout 1 # forward stdout of the command to logd
    procd_set_param stderr 1 # same for stderr
    procd_set_param pidfile /tmp/onewifi.pid
    procd_close_instance

    # Start the main process for onewifi
    #/usr/bin/OneWifi -c &   # Replace this with your process path or command
    #echo $! > /tmp/onewifi.pid   # Save the PID of the process
}

stop_service() {
    echo "Stopping onewifi service..." >> /tmp/onewifi_log.txt
    # Stop the main process if it is running
    if [ -f /tmp/onewifi.pid ]; then
        kill -9 "$(cat /tmp/onewifi.pid)"  # Kill the process
        rm -f /tmp/onewifi.pid         # Remove the PID file
    fi
    cd /banana-pi
    ./wifi_interface_down.sh >> /tmp/onewifi_log.txt
    cd -
    if [ -f /tmp/onewifi_bootup_completed ]; then
       rm -rf /tmp/onewifi_bootup_completed
    fi
}

restart_service() {
    echo "Restart triggered for onewifi service..."
    stop
    start
}

reload_service() {
    echo "Reload triggered for onewifi service..."
    stop
    start
}

service_triggers() {
    echo "Setting up respawn trigger for onewifi service..."
    procd_add_reload_trigger "/nvram/EasymeshCfg.json" "/nvram/InterfaceMap.json"
}


